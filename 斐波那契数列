import java.util.HashMap;

public class Solution {
    
    [rivate static HashMap<Integer, Integer> filter = new HashMap<>();
    
    public int Fibonacci(int n) {
        
        if (n == 0 || n == 1) {
            return n;
        } 
        if (n == 2) {
            return 1;
        }
        // n - 1
        int pre = 0;
        if (filter.get(n - 1) == filter.)
    }
}



import java.util.HashMap;
import java.util.Map;

public class Main {
    
    private Map<Integer, Integer> filter;
    
    public int Fibonacci(int n) {
        
        if (n == 0 || n == 1) {
            return n;
        } 
        filter = new HashMap<>();
        
        int ppre = 0;
        if (filter.containsKey(n - 2)) {
            ppre = filter.get(n - 2);
        } else {
            ppre = Fibonacci(n - 2);
            filter.put(n - 2, ppre);
        }
        
        // n - 1
        int pre = 0;
        if (filter.containsKey(n - 1)) {
            pre = filter.get(n - 1);
        } else {
            pre = Fibonacci(n - 1);
            filter.put(n - 1, pre);
        }
        
        return pre + ppre;
    }
}


//跳台阶
public class Solution {
    public int JumpFloor(int target) {
        //f(n) = f(n-1) +f(n-2)
        
        int[] dp = new int[target + 1];
        dp[0] = 1;
        dp[1] = 1;
        for (int i = 2; i <= target; i++) {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[target];
    }
}
