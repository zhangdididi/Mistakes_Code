/*
对于一个字符串，请设计一个算法，判断其是否为一个合法的括号串。

给定一个字符串A和它的长度n，请返回一个bool值代表它是否为一个合法的括号串。
*/

import java.util.*;

public class Parenthesis {
    public boolean chkParenthesis(String A, int n) {
        //如果字符串为空，或者长度为0，返回false
        if (A == null || n == 0) return false;
        //创建栈来保存左括号
        Stack<Character> stackOfLeft = new Stack<>();
        for (int i = 0; i < n; i++) {
            if (A.charAt(i) == '(') {
                //如果当前元素为左括号，就压入栈中
                stackOfLeft.push(A.charAt(i));
            } else if (A.charAt(i) == ')') {
                //如果当前元素为右括号，判断栈是否为空
                if (stackOfLeft.isEmpty()) {
                    //为空，说明该右括号没有可以匹配的左括号，返回false
                    return false;
                } else {
                    //如果不为空，就弹出栈顶元素
                    stackOfLeft.pop();
                }
            } else {
                //如果当前元素不是左括号或右括号，就返回false
                return false;
            }
        }
        if (stackOfLeft.isEmpty()) {
            return true;
        } else {
            return false;
        }
    }
}



import java.util.*;
public class Parenthesis {
    public boolean chkParenthesis(String A, int n) {
        // write code here
        if (A == null || A.length() == 0) {
            return false;
        }
        Stack<Character> stack = new Stack<>();
        for (int i = 0; i < n; i++) {
            if (A.charAt(i) != '(' && A.charAt(i) != ')') {
                return false;
            } else if (A.charAt(i) == '(') {
                stack.push('(');
            } else if (A.charAt(i) == ')') {
                if (stack.isEmpty()) {
                    return false;
                }
                stack.pop();
            } 
        }
        if (!stack.isEmpty()) {
            return false;
        }
        return true;
    }
}
