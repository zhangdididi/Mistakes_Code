/*
输入一个链表，按链表从尾到头的顺序返回一个ArrayList。
*/

/**
*    public class ListNode {
*        int val;
*        ListNode next = null;
*
*        ListNode(int val) {
*            this.val = val;
*        }
*    }
*
*/
import java.util.ArrayList;
import java.util.Stack;

public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        ArrayList<Integer> list = new ArrayList<>();
        if (listNode == null) {
            return list;
        }
        //通过栈来完成链表节点逆序的获取
        Stack<Integer> stack = new Stack<>();
        while (listNode != null) {
            stack.push(listNode.val);
            listNode = listNode.next;
        }
        
        while (!stack.empty()) {
            list.add(stack.pop());
        }
        return list;
    }
}


//递归
/**
*    public class ListNode {
*        int val;
*        ListNode next = null;
*
*        ListNode(int val) {
*            this.val = val;
*        }
*    }
*
*/
import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> printListFromTailToHead(ListNode listNode) {
        ArrayList<Integer> list = new ArrayList<>();
        printListFromTailToHeadHelper(listNode, list);
        return list;
    }
    
    public void printListFromTailToHeadHelper(ListNode listNode, ArrayList list) {
        if (listNode == null) {
            return;
        }
        printListFromTailToHeadHelper(listNode.next, list);
        list.add(listNode.val);
    }
}
