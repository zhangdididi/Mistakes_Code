/*
链接：https://www.nowcoder.com/questionTerminal/9370d298b8894f48b523931d40a9a4aa
来源：牛客网

风口之下，猪都能飞。当今中国股市牛市，真可谓“错过等七年”。 
给你一个回顾历史的机会，已知一支股票连续n天的价格走势，以长度为n的整数数组表示，数组中第i个元素（prices[i]）代表该股票第i天的股价。 
假设你一开始没有股票，但有至多两次买入1股而后卖出1股的机会，并且买入前一定要先保证手上没有股票。
若两次交易机会都放弃，收益为0。 设计算法，计算你能获得的最大收益。 输入数值范围：2<=n<=100,0<=prices[i]<=100
*/

public class Solution {
    /**
     * 计算你能获得的最大收益
     * 
     * @param prices Prices[i]即第i天的股价
     * @return 整型
     */
    public int calculateMax(int[] prices) {
        int afterFirstBuy = Integer.MAX_VALUE;
        int afterFirstSell = 0;
        int afterSecondBuy = Integer.MIN_VALUE;
        int afterSecondSell = 0;
        for (int currPrice : prices) {
            afterFirstBuy = Math.min(afterFirstBuy, currPrice);
            afterFirstSell = Math.max(afterFirstSell, currPrice - afterFirstBuy);
            afterSecondBuy = Math.max(afterSecondBuy, afterFirstSell - currPrice);
            afterSecondSell = Math.max(afterSecondSell, afterSecondBuy + currPrice);
        }
        return afterSecondSell;
    }
}
