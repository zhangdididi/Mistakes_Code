/*
输入某二叉树的前序遍历和中序遍历的结果，请重建出该二叉树。
假设输入的前序遍历和中序遍历的结果中都不含重复的数字。
例如输入前序遍历序列{1,2,4,7,3,5,6,8}和中序遍历序列{4,7,2,1,5,3,8,6}，则重建二叉树并返回。
*/

/**
 * Definition for binary tree
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Solution { 
    public TreeNode reConstructBinaryTree(int [] pre,int [] in) {
        if (pre.length == 0 || in.length == 0 || pre.length != in.length) {
            return null;
        }
        return reConstructBinaryTreeHelper(pre, 0, pre.length - 1, in, 0, in.length - 1);
    }
    
    public TreeNode reConstructBinaryTreeHelper(int [] pre,int pStart, int pEnd, int [] in, int iStart, int iEnd) {
        if (pStart > pEnd || iStart > iEnd) {
            return null;
        }
        TreeNode root = new TreeNode(pre[pStart]);
        for (int i = iStart; i < in.length; i++) {
            if (root.val == in[i]) {
                root.left = reConstructBinaryTreeHelper(pre, pStart + 1, i - iStart + pStart, in, iStart, i - 1);
                root.right = reConstructBinaryTreeHelper(pre, i - iStart + pStart + 1, pEnd, in, i + 1, iEnd);
                break;
            }
        }
        //取到i的位置为根结点。
        return root;
    }
}
