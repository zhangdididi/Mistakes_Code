/*
现有一个小写英文字母组成的字符串s和一个包含较短小写英文字符串的数组p，
请设计一个高效算法，对于p中的每一个较短字符串，判断其是否为s的子串。
给定一个string数组p和它的大小n，同时给定string s，为母串，
请返回一个bool数组，每个元素代表p中的对应字符串是否为s的子串。保证p中的串长度小于等于8，
且p中的串的个数小于等于500，同时保证s的长度小于等于1000。
*/

public static boolean[] chkSubStr(String[] p, int n, String s) {
         // write code here
        if (p == null || n == 0) return new boolean[0];
        boolean[] result = new boolean[n];
          //母串的字符数组
        char[] chars = s.toCharArray();
        for (int i = 0; i < n; i++) {
            String smallStr = p[i];
            boolean isSub = isSubStr(smallStr, chars);
            result[i] = isSub;
        }
        return result;
    }
    //判断是否为子串
    private static boolean isSubStr(String small, char[] chars) {
        if (small.length() > chars.length || small == null) return false;
        int length = small.length();
        int index1 = 0;
        int index2 = 0;
        while (index1 < chars.length && index2 < length) {
            while (index1 < chars.length && chars[index1] != small.charAt(index2)) {
                index1++;
            }
            //index1指向子串第一个字符
            //此时判断，如果母串剩余长度小于length的话，就直接返回false
            while (index1 < chars.length && index2 < length && chars[index1] == small.charAt(index2)) {
                index1++;
                index2++;
            }
            if (index2 == length) {
                return true;
            } else {
                index2 = 0;
            }
        }
        return false;
    }
