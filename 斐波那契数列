import java.util.HashMap;

public class Solution {
    
    [rivate static HashMap<Integer, Integer> filter = new HashMap<>();
    
    public int Fibonacci(int n) {
        
        if (n == 0 || n == 1) {
            return n;
        } 
        if (n == 2) {
            return 1;
        }
        // n - 1
        int pre = 0;
        if (filter.get(n - 1) == filter.)
    }
}



import java.util.HashMap;
import java.util.Map;

public class Main {
    
    private Map<Integer, Integer> filter;
    
    public int Fibonacci(int n) {
        
        if (n == 0 || n == 1) {
            return n;
        } 
        filter = new HashMap<>();
        
        int ppre = 0;
        if (filter.containsKey(n - 2)) {
            ppre = filter.get(n - 2);
        } else {
            ppre = Fibonacci(n - 2);
            filter.put(n - 2, ppre);
        }
        
        // n - 1
        int pre = 0;
        if (filter.containsKey(n - 1)) {
            pre = filter.get(n - 1);
        } else {
            pre = Fibonacci(n - 1);
            filter.put(n - 1, pre);
        }
        
        return pre + ppre;
    }
}
